/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package proyectospaceadmin;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author porto
 */
public class ParkS1 extends javax.swing.JPanel {

    /**
     * Creates new form ParkS1temp
     */

    public ParkS1() {
        initComponents();
        setMatrizS1();
    }

// Matriz de Botones
    private int rowS1 = 5; // 5 filas
    private int columS1 = 4; // 4 columnas
    JButton[][] parkS1;

//Cambiar por enum
    //Metodo para cerrar
    private void cerrarVentana() {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            frame.dispose(); // Cierra la ventana
        }
    }

// Método para Crear Matriz
    //Parqueo S1 5x4
    public void setMatrizS1() {
        parkS1 = new JButton[rowS1][columS1];
        int positionX = 30;
        int positionY = 30;

        for (int i = 0; i < rowS1; i++) {
            for (int j = 0; j < columS1; j++) {
                parkS1[i][j] = new JButton();
                parkS1[i][j].setBounds(positionX, positionY, 150, 60);
                parkS1[i][j].setBackground(Color.LIGHT_GRAY);
                parkS1[i][j].setText("Loading...");
                ButtonController bt = new ButtonController();
                parkS1[i][j].addActionListener(bt);

                panelS1.add(parkS1[i][j]);
                positionX += 220;
            }
            positionX = 30;
            positionY += 120;
        }

        panelS1.revalidate();
        panelS1.repaint();
        valueBottons(rowS1, columS1, Data.matrizS1); // Llamar sin parámetros
    }

    //Clase de accion de boton 
    private class ButtonController implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            //seleccionar el boton de la matrix
            for (int i = 0; i < rowS1; i++) {
                for (int j = 0; j < columS1; j++) {
                    if (e.getSource().equals(parkS1[i][j])) {
                        if (Data.matrizS1[i][j] == "P") {
                            JOptionPane.showMessageDialog(null, "Elije otro espacio este no esta disponible");
                        } else {
                            formularioRequest form = new formularioRequest();
                            form.setDatoX(i);
                            form.setDatoY(j);
                            form.setStatus(Data.matrizS1[i][j]);
                            form.setidPark("S1");
                            cerrarVentana();
                            form.setVisible(true);
                        }
                    }
                }
            }
        }
    }

// Método para actualizar botones según la disponibilidad
    public void valueBottons(int x, int y, String[][] matrix) {
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                if (matrix[i][j] == "O") {
                    parkS1[i][j].setBackground(Color.GREEN);
                    parkS1[i][j].setText("Disponible");
                } else if (matrix[i][j] == "E") {
                    parkS1[i][j].setBackground(Color.BLUE);
                    parkS1[i][j].setText("Disponible");
                } else if (matrix[i][j] == "D") {
                    parkS1[i][j].setBackground(Color.ORANGE);
                    parkS1[i][j].setText("Disponible");
                } else {
                    parkS1[i][j].setBackground(Color.RED);
                    parkS1[i][j].setText("No disponible");
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelS1 = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(500, 300));

        panelS1.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout panelS1Layout = new javax.swing.GroupLayout(panelS1);
        panelS1.setLayout(panelS1Layout);
        panelS1Layout.setHorizontalGroup(
            panelS1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );
        panelS1Layout.setVerticalGroup(
            panelS1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 658, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelS1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelS1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelS1;
    // End of variables declaration//GEN-END:variables
}
